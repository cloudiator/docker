version: '2.1'

services:

  # Uses mariadb
  store:
    image: mariadb:latest
    restart: always
    environment:
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
      - MYSQL_DATABASES=vm node discovery job schedule faas user secure monitoring byon
      - MYSQL_USER=${DATABASE_USER:?err}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD:?err}
    volumes:
      - ./store-scripts:/docker-entrypoint-initdb.d

  # User Interface
  # nginx server with user interface
  interface:
    image: cloudiator/user-interface:latest
    volumes:
      - ./interface/appConfig.template:/usr/share/nginx/html/appConfig.template
    ports:
      - "8080:80"
    environment:
      - API_URL=http://${HOST_IP:?err}:9000
      - AUTH_MODE=${AUTH_MODE:?err}
      - AUTH_TOKEN=${AUTH_TOKEN:?err}
      - SSH_TUNNEL_PATH=ws://${HOST_IP:?err}:4341
    command: sh -c "envsubst \"`env | awk -F = '{printf \" $$%s\", $$1}'`\" < /usr/share/nginx/html/appConfig.template > /usr/share/nginx/html/assets/appConfig.json && exec nginx -g 'daemon off;'"
  
  # Shh Tunnel, needed for the web UI SSH Terminal feature
  ssh-tunnel:
    image: shinikaze/ssh-web-proxy:latest
    ports: 
      - "4341:8080"
  
  # Agent responsible for starting virtual machines
  vm-agent:
    depends_on:
      - "store"
      - "kafka"
      - "discovery-agent"
      - "user-agent"
    image: ${IMAGE_PREFIX}cloudiator/vm-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/vm
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGSTASH_HOST=logstash:5000
      - STATISTICS_ENABLED=${STATISTICS_ENABLED:?STATISTICS_ENABLED not set!}
      - STATISTICS_INFLUX_URL=${INFLUX_URL:?INFLUX_URL not set!}
      - STATISTICS_INFLUX_USER=cloudiator
      - STATISTICS_INFLUX_PASSWORD=${INFLUX_PASSWORD:?INFLUX_PASSWORD not set!}
      - VM_ENABLE_CLEANUP

  # Agent responsible for starting nodes
  node-agent:
    depends_on:
      - "store"
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/node-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JPA_URL=jdbc:mysql://store:3306/node
      - LOGSTASH_HOST=logstash:5000

  # Agent responsible for the discovery
  # of cloud offers
  discovery-agent:
    depends_on:
      - "store"
      - "user-agent"
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/discovery-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/discovery
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Agent responsible for installing
  # environments on allocated nodes
  install-agent:
    depends_on:
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/install-agent:latest
    restart: always
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGSTASH_HOST=logstash:5000
      - INSTALLER_JAVA_DOWNLOAD
      - INSTALLER_VISOR_DOWNLOAD
      - INSTALLER_LANCE_DOWNLOAD
      - INSTALLER_DOCKER_BINARY_DOWNLOAD
      - INSTALLER_DOCKER_MTU_DOWNLOAD
      - INSTALLER_ALLUXIO_DOWNLOAD
      - INSTALLER_DLMSAGENT_DOWNLOAD
      - INSTALLER_SPARK_CONTAINER_VERSION
      - INSTALLER_SPARK_MASTER_IP=${HOST_IP:?err}
      - INSTALLER_SPARK_MASTER_PORT=7077
      - INSTALLER_EMS_URL=https://${HOST_IP}:8111/baguette/registerNode
      - INSTALLER_EMS_API_KEY
      - INSTALLER_EMS_KEYSTORE_FILE
      - INSTALLER_EMS_KEYSTORE_TYPE
      - INSTALLER_EMS_KEYSTORE_PASSWORD
      - INSTALLER_EMS_KEYSTORE_KEY_PASSWORD
      - INSTALLER_EMS_TRUSTSTORE_FILE
      - INSTALLER_EMS_TRUSTSTORE_TYPE
      - INSTALLER_EMS_TRUSTSTORE_PASSWORD
      - JMS_IP
      - JMS_PORT
      - DLMS_WEBSERVICE_PORT
      - APP_NAME
      - METRIC_PATTERN
      - METRIC_REPORTING_INTERVAL
      - INSTALLER_ALLUXIO_MASTER_HOST=${HOST_IP:?err}
      - JMS_USER
      - JMS_PASSWORD
    volumes:
      - ./install-agent:/home

  # Agent containing the matchmaking logic
  # Responsible for generating node candidates
  # Responsible for selecting best node candidate
  matchmaking-agent:
    depends_on:
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/matchmaking-agent:latest
    restart: always
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGSTASH_HOST=logstash:5000
      - MATCHMAKING_SOLVING_TIME=2

  # Agent responsible for jobs
  job-agent:
    depends_on:
      - "store"
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/job-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/job
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Agent responsible for scheduling
  # Receives task to be scheduled and
  # handles the instantiation workflow
  scheduler-agent:
    depends_on:
      - "kafka"
      - "store"
    image: ${IMAGE_PREFIX}cloudiator/scheduler-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/schedule
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - STATISTICS_ENABLED=true
      - STATISTICS_INFLUX_URL=${INFLUX_URL:?err}
      - STATISTICS_INFLUX_USER=cloudiator
      - STATISTICS_INFLUX_PASSWORD=${INFLUX_PASSWORD:?err}

  # Agent handling lance processes
  lance-agent:
    depends_on:
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/lance-agent:latest
    restart: always
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JAVA_TOOL_OPTIONS=-Dlca.client.config.registry=etcdregistry -Dlca.client.config.registry.etcd.hosts=${HOST_IP:?err}
      - DEPLOYMENT_INSTALL_MELODIC_TOOLS

  # Agent handling faas processes
  faas-agent:
    depends_on:
      - "kafka"
      - "store"
    image: ${IMAGE_PREFIX}cloudiator/faas-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/faas
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Agent handling Spark processes
  spark-agent:
    depends_on:
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/spark-agent:latest
    restart: always
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LIVY_SERVER=${HOST_IP:?err}:8998
      - DEPLOYMENT_INSTALL_MELODIC_TOOLS

  # Agent responsible for user management
  # authentication and authorisation
  user-agent:
    depends_on:
      - "store"
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/user-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/user
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - AUTH_MODE=${AUTH_MODE:?err}
      - AUTH_TOKEN=${AUTH_TOKEN}

  # Server that exposes the main API
  # Uses REST
  # Partly autogenerated from Swagger
  rest-server:
    depends_on:
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/rest-server:latest
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGSTASH_HOST=logstash:5000
    ports:
      - 9000:9000

  # Agent responsible for monitoring orchestration
  monitoring-agent:
    image: ${IMAGE_PREFIX}cloudiator/monitoring-agent
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/monitoring
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DEPLOYMENT_INSTALL_MELODIC_TOOLS

  # Utility service
  # Responsible for encrypting data
  encryption-agent:
    depends_on:
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/encryption-agent:latest
    restart: always
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - /opt/data/password
      - /opt/data/salt

  # Responsible for storing secured variables
  securestore-agent:
    depends_on:
      - kafka
      - encryption-agent
      - store
    image: ${IMAGE_PREFIX}cloudiator/securestore-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - JPA_URL=jdbc:mysql://store:3306/secure
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Responsible for parsing a job description given
  # as YAML format (optional)
  yaml-agent:
    depends_on:
      - kafka
    image: ${IMAGE_PREFIX}cloudiator/yaml-agent:latest
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092


  # ETCD directory required by lance
  etcd:
    image: quay.io/coreos/etcd
    ports:
      - 4001:4001
      - 2380:2380
      - 2379:2379
    environment:
      - ETCD_NAME=etcd0
      - ETCD_ADVERTISE_CLIENT_URLS=http://${HOST_IP:?err}:2379,http://${HOST_IP:?err}:4001
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379,http://0.0.0.0:4001
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://${HOST_IP:?err}:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_CLUSTER=etcd0=http://${HOST_IP:?err}:2380

  # (optional)
  # Can be used for debugging the etcd directory.
  etcd-browser:
    build: ./etcd-browser
    ports:
      - 8000:8000
    environment:
      - ETCD_HOST=etcd
      - ETCD_PORT=2379
    depends_on:
      - "etcd"

  # Apache Kafka Broker
  # Main communication hub
  kafka:
    depends_on:
      - "zookeeper"
    image: wurstmeister/kafka
    hostname: kafka
    restart: always
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_MESSAGE_MAX_BYTES=2147483646

  # Apache Zookeeper
  # used by Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always

  # Influx DB (optional)
  # used to collect statistics
  # influx:
  #  image: influxdb:latest
  #  ports:
  #    - "8086:8086"
  #  environment:
  #    - INFLUXDB_DB=cloudiator
  #    - INFLUXDB_ADMIN_USER=admin
  #    - INFLUXDB_ADMIN_PASSWORD=${INFLUX_PASSWORD:?err}
  #    - INFLUXDB_USER=cloudiator
  #    - INFLUXDB_USER_PASSWORD=${INFLUX_PASSWORD:?err}
  #  volumes:
  #    - /var/lib/influxdb

  # Chronograf (optional)
  # chronograf:
  #  image: chronograf:latest
  #  depends_on:
  #    - "influx"
  #  volumes:
  #    - /var/lib/chronograf
  #  ports:
  #    - "8888:8888"
  #  environment:
  #    - INFLUXDB_URL=http://${HOST_IP:?err}:8086
  #    - INFLUXDB_USERNAME=cloudiator
  #    - INFLUXDB_PASSWORD=${INFLUX_PASSWORD:?err}

  # (optional)
  # can be used for debugging kafka broker
  kafka-manager:
    depends_on:
      - "kafka"
      - "zookeeper"
    image: sheepkiller/kafka-manager:latest
    environment:
      - ZK_HOSTS=zookeeper:2181
      - APPLICATION_SECRET=verySecureSecret
      - KM_VERSION=1.3.3.17
    ports:
      - 8082:9000
    volumes:
      - ./kafka-manager:/kafka-manager-1.3.1.8/conf

  # (optional)
  # ELK Stack is used for logging
  elasticsearch:
    build:
      context: elasticsearch/
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  # (optional)
  # ELK Stack is used for logging
  logstash:
    build:
      context: logstash/
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  # (optional)
  # ELK Stack is used for logging
  kibana:
    build:
      context: kibana/
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # (optional)
  # Monitoring of docker containers
  cadvisor:
    image: google/cadvisor:latest
    restart: always
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  # (optional, only required if Spark jobs need to be executed)
  # use DEPLOY_MODE=client for pySpark and DEPLOY_MODE=cluster for Java/Scala applications
  livy-server:
    image: ${IMAGE_PREFIX}cloudiator/livy-server:latest
    restart: always
    environment:
      - SPARK_MASTER_ENDPOINT=${HOST_IP:?err}
      - SPARK_MASTER_PORT=7077
      - DEPLOY_MODE=cluster
    volumes:
      - /tmp:/tmp
    #ports:
    #- 8998:8998
    network_mode: host
  # (optional, only required if Spark jobs need to be executed)
  spark-master:
    image: ${IMAGE_PREFIX}cloudiator/spark-master:latest
    restart: always
    environment:
      - PUBLIC_IP=${HOST_IP:?HOST_IP not set!}
      - SPARK_MASTER_UI_PORT=8181
      - SPARK_MASTER_PORT=7077
      - JMS_IP=${JMS_IP:?JMS_IP not set!}
      - JMS_PORT=${JMS_PORT:?JMS_PORT not set!}
      - APP_NAME=${APP_NAME:?APP_NAME not set!}
      - METRIC_PATTERN=${METRIC_PATTERN:?METRIC_PATTERN not set!}
      - METRIC_REPORTING_INTERVAL=${METRIC_REPORTING_INTERVAL:?METRIC_REPORTING_INTERVAL not set!}
      - JMS_USER=${JMS_USER:?JMS_USER not set!}
      - JMS_PASSWORD=${JMS_PASSWORD:?JMS_PASSWORD not set!}
    #ports:
    #- 7077:7077
    #- 8181:8080
    network_mode: host

  # Agent handling byon requests
  byon-agent:
    depends_on:
      - "store"
      - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/byon-agent:latest
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER:?err}
      - JPA_PASSWORD=${DATABASE_PASSWORD:?err}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JPA_URL=jdbc:mysql://store:3306/byon
      - LOGSTASH_HOST=logstash:5000

  # (optional)
  # Managing of running docker containers
  portainer:
    image: portainer/portainer
    restart: always
    ports:
      - "8083:9000"
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  portainer_data:
